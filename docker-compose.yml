# uses environment variables in .env file
services:
  os01:
    restart: always
    image: opensearchproject/opensearch:latest
    environment:
      discovery.type: single-node
      #discovery.seed_hosts: "os01,os02,os03"
      #cluster.initial_master_nodes: "os01,os02,os03"
      cluster.name: "opensearch"
      network.host: "0.0.0.0"
      node.name: "os01"
      #index.codec: "zstd_no_dict"
      bootstrap.memory_lock: true
      #OPENSEARCH_JAVA_OPTS: "-Xms16g -Xmx16g"
      OPENSEARCH_USERNAME: ${OPENSEARCH_USER}
      OPENSEARCH_INITIAL_ADMIN_PASSWORD: ${OPENSEARCH_PASSWORD}
      plugins.security.ssl.http.enabled: false
      http.cors.enabled: true
      http.cors.allow-origin: "*"
      http.cors.allow-headers: "*"
      #deploy:
      #resources:
      #limits:
      #memory: 8000M
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - 9200:9200
    volumes:
      - opensearch_data:/usr/share/opensearch/data
    networks:
      - gulp

  opensearch-dashboards:
    profiles: [ "os-dashboards" ]
    image: opensearchproject/opensearch-dashboards:latest
    container_name: opensearch-dashboards
    ports:
      - 5601:5601
    environment:
      OPENSEARCH_HOSTS: '["http://os01:9200"]'
    depends_on:
      - os01
    networks:
      - gulp

  postgres:
    # using an image having pg_cron preinstalled
    # TODO: use the official postgres image and install pg_cron
    image: cleisonfmelo/postgres-pg-cron
    #command: postgres -c 'max_connections=${POSTGRES_MAX_CONNECTIONS}'
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      #- POSTGRES_MAX_CONNECTIONS=${POSTGRES_MAX_CONNECTIONS}
    networks:
      - gulp

  elasticvue:
    profiles: [ "dev" ]
    image: cars10/elasticvue:latest
    container_name: elasticvue
    ports:
      - 8082:8080
    depends_on:
      - os01
    networks:
      - gulp

  adminer:
    profiles: [ "dev" ]
    image: adminer
    depends_on:
      - postgres
    restart: always
    ports:
      - 8081:8080
    networks:
      - gulp

  gulp:
    profiles: [ "gulp" ]
    image: ${GULP_IMAGE:-mentatis/gulp-core:latest}
    container_name: gulp
    environment:
      - POSTGRES_URL=postgresql+psycopg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - OPENSEARCH_URL=http://${OPENSEARCH_USER}:${OPENSEARCH_PASSWORD}@os01:9200
      - PATH_PLUGINS_EXTRA=/app/plugins_extra
      - PATH_MAPPING_FILES_EXTRA=/app/plugins_extra/mappings
      - GULP_CONFIG_PATH=/root/.config/gulp/gulp_cfg.json
      - PATH_CERTS=/app/certs
      - BIND_TO_PORT=${BIND_TO_PORT:-8080}
    volumes:
      - ${GULP_CONFIG_PATH:-./gulp_cfg_template.json}:/root/.config/gulp/gulp_cfg.json
      - ${PATH_PLUGINS_EXTRA:-/app/plugins_extra}:/app/plugins_extra
      - ${PATH_MAPPING_FILES_EXTRA:-/app/plugins_extra/mappings}:/app/plugins_extra/mappings
      - ${PATH_CERTS:-./certs}:/app/certs
      - ./gulpconfig:/root/.config/gulp
    depends_on:
      - postgres
      - os01
    ports:
      - ${BIND_TO_PORT:-8080}:${BIND_TO_PORT:-8080}

    # sleeping for 30 seconds to wait for both gulp/opensearch to be ready
    # (seems depends is not enough)
    command: /bin/sh -c "sleep 30 && python3 -m gulp ${EXTRA_ARGS:-}"
    networks:
      - gulp

    # allow restart
    restart: unless-stopped

  gulp-web:
    profiles: [ "gui" ]
    image: mentatis/gulp-web:latest
    depends_on:
      - gulp
    container_name: gulp-web
    restart: on-failure
    ports:
      - 3000:3000
    networks:
      - gulp

volumes:
  postgres_data:
  opensearch_data:


networks:
  gulp:
    driver: bridge
