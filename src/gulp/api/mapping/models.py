from typing import Optional, override

from pydantic import BaseModel, ConfigDict, Field
from muty.pydantic import autogenerate_model_example, autogenerate_model_example_by_class

"""
mapping files structure:
{
    mapping_id_1: {
        GulpMapping: {
            "fields": {
                field_1: {
                    GulpMappingField
                },
                field_2: {
                    GulpMappingField
                },
                ...
            }
        }
    },
    mapping_id_2: {
        GulpMapping: {
            "fields": {
                field_1: {
                    GulpMappingField
                },
                field_2: {
                    GulpMappingField
                },
                ...
            }
        }
    },
    ...
}
"""


class GulpMappingField(BaseModel):
    """
    defines how to map a single field, including field-specific options.
    """

    model_config = ConfigDict(extra="allow")

    ecs: Optional[list[str]] = Field(
        None,
        description="one or more ECS field names to map the source field to in the resulting document.",
        example=["test.mapped"],
        min_length=1,
    )
    extra_doc_with_event_code: Optional[str] = Field(
        None,
        example="1234",
        description='if this is set, the creation of an extra document is triggered with the given "event.code" and "@timestamp" set to this field value.',
    )
    is_timestamp_chrome: Optional[bool] = Field(
        False,
        example=False,
        description="if set, the corresponding value is a webkit timestamp (from 1601) and will be converted to nanoseconds from unix epoch.",
    )

    @override
    @classmethod
    def model_json_schema(cls, *args, **kwargs):
        return autogenerate_model_example(cls, *args, **kwargs)


class GulpMapping(BaseModel):
    """
    defines a logsource -> gulp document mapping
    """

    model_config = ConfigDict(extra="allow")

    fields: Optional[dict[str, GulpMappingField]] = Field(
        {},
        description="field mappings { raw_field: { GulpMappingField } } to translate a logsource to gulp document.",
        min_length=1,
        example={"field1": {"ecs": ["test.mapped"]}},
    )
    description: Optional[str] = Field(
        None,
        description="if set, mapping's description.",
        example="test description.",
    )
    agent_type: Optional[str] = Field(
        None,
        description='if set, all documents generated by this mapping have "agent.type" set to this value. either, the plugin is responsible for setting this.',
        example="win_evtx",
    )

    event_code: Optional[str] = Field(
        None,
        example="1234",
        description='if set, all documents generated by this mapping have "event.code" set to this value (and "gulp.event_code" to the corresponding numeric value). either, the plugin is responsible for setting this.',
    )
    timestamp_field: Optional[str] = Field(
        None,
        example="Created0x10",
        description='if set, all documents generated by this mapping have "@timestamp" set to this field value. either, the plugin is responsible for setting this.',
    )
    timestamp_dayfirst: Optional[bool] = Field(
        None,
        example=False,
        description="for advanced usage: if set, timestamps in this mapping will be parsed with dayfirst=True (default=dateutil.parser default).",
    )
    timestamp_yearfirst: Optional[bool] = Field(
        None,
        example=True,
        description="for advanced usage: if set, timestamps in this mapping will be parsed with yearfirst=True (default=dateutil.parser default)",
    )
    timestamp_fuzzy: Optional[bool] = Field(
        None,
        example=False,
        description="for advanced usage: if set, timestamps in this mapping will be parsed with fuzzy=True (default=dateutil.parser default)",
    )

    @override
    @classmethod
    def model_json_schema(cls, *args, **kwargs):
        return autogenerate_model_example(cls, *args, **kwargs)

class GulpMappingFileMetadata(BaseModel):
    """
    metadata for a mapping file.
    """

    model_config = ConfigDict(extra="allow")

    plugin: list[str] = Field(
        ...,
        example=["win_evtx", "csv"],
        description="one or more plugin names that this mapping file is associated with.",
    )

    @override
    @classmethod
    def model_json_schema(cls, *args, **kwargs):
        return autogenerate_model_example(cls, *args, **kwargs)


class GulpMappingFile(BaseModel):
    """
    a mapping file, containing one or more GulpMapping objects.
    """

    model_config = ConfigDict(extra="allow")

    mappings: dict[str, GulpMapping] = Field(
        ...,
        description="defined mappings for this mapping file, key is the `mapping_id`",
        example=autogenerate_model_example_by_class(GulpMapping),
        min_length=1,
    )
    metadata: Optional[GulpMappingFileMetadata] = Field(
        None,
        example=autogenerate_model_example_by_class(GulpMappingFileMetadata),
        description="metadata for the mapping file.",
    )

    @override
    @classmethod
    def model_json_schema(cls, *args, **kwargs):
        return autogenerate_model_example(cls, *args, **kwargs)
