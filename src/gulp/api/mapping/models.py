from typing import Optional, override

from pydantic import BaseModel, ConfigDict, Field
from muty.pydantic import (
    autogenerate_model_example_by_class,
)


class GulpMappingField(BaseModel):
    """
    defines how to map a single field, including field-specific options.
    """

    model_config = ConfigDict(
        extra="allow",
        json_schema_extra={
            "examples": [
                {
                    "ecs": ["test.mapped"],
                    "extra_doc_with_event_code": "1234",
                    "is_timestamp_chrome": False,
                }
            ]
        },
    )

    ecs: Optional[list[str] | str] = Field(
        None,
        description="one or more ECS field names to map the source field to in the resulting document.",
        min_length=1,
    )
    extra_doc_with_event_code: Optional[str] = Field(
        None,
        description="""
if this is set, the creation of an extra document is triggered with the given `event.code` and `@timestamp` set to this field value.

usually, in this setting, a mapping file shows a field `ecs` directly mapped as `@timestamp` (to indicate the *main* document) and one or more additional `extra_doc_with_event_code` fields.

check `mftecmd_csv.json` for an example of this setting.
""",
    )
    is_timestamp_chrome: Optional[bool] = Field(
        False,
        description="if set, the corresponding value is a `webkit timestamp` (from 1601) and will be converted to nanoseconds from the unix epoch.",
    )


class GulpMapping(BaseModel):
    """
    defines a logsource -> gulp document mapping
    """

    model_config = ConfigDict(
        extra="allow",
        json_schema_extra={
            "examples": [
                {
                    "fields": {"field1": {"ecs": ["test.mapped"]}},
                    "description": "test description.",
                    "agent_type": "win_evtx",
                    "event_code": "1234",
                    "timestamp_field": "Created0x10",
                    "timestamp_dayfirst": False,
                    "timestamp_yearfirst": True,
                    "timestamp_fuzzy": False,
                }
            ]
        },
    )

    fields: Optional[dict[str, GulpMappingField]] = Field(
        {},
        description="field mappings { raw_field: { GulpMappingField } } to translate a logsource to gulp document.",
    )
    description: Optional[str] = Field(
        None,
        description="if set, mapping's description.",
    )
    agent_type: Optional[str] = Field(
        None,
        description='if set, all documents generated by this mapping have "agent.type" set to this value. either, the plugin is responsible for setting this.',
    )

    event_code: Optional[str] = Field(
        None,
        description='if set, all documents generated by this mapping have "event.code" set to this value (and "gulp.event_code" to the corresponding numeric value). either, the plugin is responsible for setting this.',
    )
    timestamp_field: Optional[str] = Field(
        None,
        description='if set, all documents generated by this mapping have "@timestamp" set to this field value. either, the plugin is responsible for setting this.',
    )
    timestamp_dayfirst: Optional[bool] = Field(
        None,
        description="for advanced usage: if set, timestamps in this mapping will be parsed with dayfirst=True (default=dateutil.parser default).",
    )
    timestamp_yearfirst: Optional[bool] = Field(
        None,
        description="for advanced usage: if set, timestamps in this mapping will be parsed with yearfirst=True (default=dateutil.parser default)",
    )
    timestamp_fuzzy: Optional[bool] = Field(
        None,
        description="for advanced usage: if set, timestamps in this mapping will be parsed with fuzzy=True (default=dateutil.parser default)",
    )


class GulpMappingFileMetadata(BaseModel):
    """
    metadata for a mapping file.
    """

    model_config = ConfigDict(
        extra="allow", json_schema_extra={"examples": [{"plugin": ["win_evtx", "csv"]}]}
    )

    plugin: list[str] = Field(
        ...,
        description="one or more plugin names that this mapping file is associated with.",
    )


class GulpMappingFile(BaseModel):
    """
    a mapping file, containing one or more GulpMapping objects.
    """

    model_config = ConfigDict(
        extra="allow",
        json_schema_extra={
            "examples": [
                {
                    "mappings": autogenerate_model_example_by_class(GulpMapping),
                    "metadata": autogenerate_model_example_by_class(
                        GulpMappingFileMetadata
                    ),
                }
            ]
        },
    )

    mappings: dict[str, GulpMapping] = Field(
        ...,
        description="defined mappings for this mapping file, key is the `mapping_id`",
        min_length=1,
    )
    metadata: Optional[GulpMappingFileMetadata] = Field(
        ...,
        description="metadata for the mapping file.",
    )
